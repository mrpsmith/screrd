openapi: "3.0.1"
info:
  title: SumUp REST API
  version: 1.0.0
  contact:
    email: dev@sumup.com
servers:
  - url: https://api.sumup.com/{version}
    description: Production server
    variables:
      version:
        default: v0.1
        description: Version of the API.
tags:
  - name: Checkouts
    description: View and manage payment checkouts.
  - name: Customers
    description: View and manage saved customers and their payment instruments.
  - name: Transactions
    description: View transactions.
paths:
  /checkouts:
    get:
      description: Lists all checkout resources.
      tags:
        - Checkouts
      security:
        - accessToken:
          - payments
      parameters:
        - $ref: "#/components/parameters/checkoutReference"
        - $ref: "#/components/parameters/clientTransactionId"
        - $ref: "#/components/parameters/merchantCode"
      responses:
        "200":
          $ref: "#/components/responses/checkoutListResponse"
        "401":
          $ref: "#/components/responses/errorNotAuthorized"
    post:
      description: Create a new payment checkout resource
      tags:
        - Checkouts
      security:
        - accessToken:
          - payments
      requestBody:
        $ref: "#/components/requestBodies/checkoutCreate"
      responses:
        "201":
          $ref: "#/components/responses/checkoutCreateResponse"
        "400":
          $ref: "#/components/responses/errorBadRequest"
        "401":
          $ref: "#/components/responses/errorNotAuthorized"
        "409":
          $ref: "#/components/responses/errorConflict"
  /checkouts/{id}:
    parameters:
      - $ref: "#/components/parameters/checkoutId"
    get:
      description: Retrieves an identified checkout resource.
      tags:
        - Checkouts
      security:
        - accessToken:
          - payments
      responses:
        "200":
          $ref: "#/components/responses/checkoutProcessResponse"
        "401":
          $ref: "#/components/responses/errorNotAuthorized"
        "404":
          $ref: "#/components/responses/errorNotFound"
    put:
      description: Processes an identified checkout resource with the specified payment instrument.
      tags:
        - Checkouts
      security:
        - accessToken:
          - payments
      requestBody:
        $ref: "#/components/requestBodies/checkoutProcess"
      responses:
        "200":
          $ref: "#/components/responses/checkoutProcessResponse"
        "400":
          $ref: "#/components/responses/errorBadRequest"
        "401":
          $ref: "#/components/responses/errorNotAuthorized"
        "404":
          $ref: "#/components/responses/errorNotFound"
        "409":
          $ref: "#/components/responses/errorConflict"
    delete:
      description: Deactivates an identified checkout resource.
      tags:
        - Checkouts
      security:
        - accessToken:
          - payments
      responses:
        "204":
          description: OK
        "401":
          $ref: "#/components/responses/errorNotAuthorized"
        "404":
          $ref: "#/components/responses/errorNotFound"
        "409":
          $ref: "#/components/responses/errorConflict"
  /customers:
    post:
      description: Creates a new saved customer resource.
      tags:
        - Customers
      security:
        - accessToken:
          - payment_instruments
      requestBody:
        $ref: "#/components/requestBodies/customerCreateRequest"
      responses:
        "201":
          $ref: "#/components/responses/customerResponse"
        "400":
          $ref: "#/components/responses/errorBadRequest"
        "401":
          $ref: "#/components/responses/errorNotAuthorized"
        "403":
          $ref: "#/components/responses/errorForbidden"
        "409":
          $ref: "#/components/responses/errorConflict"
  /customers/{customer_id}:
    parameters:
      - $ref: "#/components/parameters/customerId"
    get:
      description: Retrieves an identified saved customer resource.
      tags:
        - Customers
      security:
        - accessToken:
          - payment_instruments
      responses:
        "200":
          $ref: "#/components/responses/customerResponse"
        "401":
          $ref: "#/components/responses/errorNotAuthorized"
        "403":
          $ref: "#/components/responses/errorForbidden"
        "404":
          $ref: "#/components/responses/errorNotFound"
    put:
      description: Updates an identified saved customer resource.
      tags:
        - Customers
      security:
        - accessToken:
          - payment_instruments
      requestBody:
        $ref: "#/components/requestBodies/customerRequest"
      responses:
        "200":
          $ref: "#/components/responses/customerResponse"
        "400":
          $ref: "#/components/responses/errorBadRequest"
        "401":
          $ref: "#/components/responses/errorNotAuthorized"
        "403":
          $ref: "#/components/responses/errorForbidden"
        "404":
          $ref: "#/components/responses/errorNotFound"
        "409":
          $ref: "#/components/responses/errorConflict"
  /customers/{customer_id}/payment-instruments:
    parameters:
      - $ref: "#/components/parameters/customerId"
    get: # FIXME Add details of sepa dd response.
      description: Lists all active payment instrument resources that are saved for an identified customer.
      tags:
        - Customers
      responses:
        "200":
          $ref: "#/components/responses/paymentInstrumentList"
        "401":
          $ref: "#/components/responses/errorNotAuthorized"
        "403":
          $ref: "#/components/responses/errorForbidden"
        "404":
          $ref: "#/components/responses/errorNotFound"
    post: # FIXME Add option of for sepa dd pi
      description: Creates and activates a new payment instrument resource for an identified customer.
      tags:
        - Customers
      security:
        - accessToken:
          - payment_instruments
      requestBody:
        $ref: "#/components/requestBodies/paymentInstrumentRequest"
      responses:
        "200":
          $ref: "#/components/responses/paymentInstrumentResponse"
        "400":
          $ref: "#/components/responses/errorBadRequest"
        "401":
          $ref: "#/components/responses/errorNotAuthorized"
        "403":
          $ref: "#/components/responses/errorForbidden"
        "404":
          $ref: "#/components/responses/errorNotFound"
        "409":
          $ref: "#/components/responses/errorConflict"
  /customers/{customer_id}/payment-instruments/{token}:
    parameters:
      - $ref: "#/components/parameters/customerId"
      - $ref: "#/components/parameters/token"
    delete:
      description: Deactivates an identified card payment instrument resource for a customer.
      tags:
        - Customers
      security:
        - accessToken:
          - payment_instruments
      responses:
        "204":
          description: OK
        "401":
          $ref: "#/components/responses/errorNotAuthorized"
        "403":
          $ref: "#/components/responses/errorForbidden"
        "404":
          $ref: "#/components/responses/errorNotFound"
  # # /customers/{customer_id}/payment-instruments/direct_debit:
    #   parameters:
    #     - $ref: "#/components/parameters/customerId"
    #   put:
    #     description:
    #     tags:
    #       - Customers
    #     security:
    #       - accessToken:
    #         - payment_instruments
    #     requestBody:
    #     responses:
    #       "200":
    #         $ref: "#/components/responses/FIXME"
    #       "400":
    #         $ref: "#/components/responses/errorBadRequest"
    #       "401":
    #         $ref: "#/components/responses/errorNotAuthorized"
    #       "403":
    #         $ref: "#/components/responses/errorForbidden"
    #       "404":
    #         $ref: "#/components/responses/errorNotFound"
    #   delete:
  /me/transactions/history:
    get:
      description: Lists a history of all transactions associated with the merchant account.
      tags:
        - Transactions
      security:
        - accessToken:
          - transactions.history
      # FIXME Add parameters/request body???
      parameters:
        - $ref: "#/components/parameters/order"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/transactionCode"
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/users"
        - $ref: "#/components/parameters/geoCoordinates"
        - $ref: "#/components/parameters/readers"
        - $ref: "#/components/parameters/statuses"
        - $ref: "#/components/parameters/paymentTypes"
        - $ref: "#/components/parameters/types"
        - $ref: "#/components/parameters/changesSince"
        - $ref: "#/components/parameters/newestTime"
        - $ref: "#/components/parameters/newestRef"
        - $ref: "#/components/parameters/oldestTime"
        - $ref: "#/components/parameters/oldestRef"
      responses:
        "200":
          $ref: "#/components/responses/transactionHistoryResponse"
        "401":
          $ref: "#/components/responses/errorNotAuthorized"
  /me/transactions:
    get:
      description: |
        Retrieves the full details of an identified transaction. The transaction is identified by a query parameter and at least one of following parameters is required:
         *  `id`
         *  `internal_id`
         *  `transaction_code`
      tags:
        - Transactions
      security:
        - accessToken:
          - transactions.history
      parameters:
        - $ref: "#/components/parameters/transactionId"
        - $ref: "#/components/parameters/transactionInternalId"
        - $ref: "#/components/parameters/transactionCode"
        # - $ref: "#/components/parameters/foreignTransactionId"
        # - $ref: "#/components/parameters/clientTransactionIdTrx"
        - $ref: "#/components/parameters/eventStatuses"
        - $ref: "#/components/parameters/eventTypes"
      responses:
        "200":
          $ref: "#/components/responses/transactionResponse"
        "401":
          $ref: "#/components/responses/errorNotAuthorized"
        "404":
          $ref: "#/components/responses/errorNotFound"
security:
  - accessToken: []
components:
  schemas:
    # Checkouts
    # Figure out common and specific properties, divide them into separate models and use allOf/oneOf to build the complete model
    checkoutCreate:
      type: object
      required:
        - checkout_reference
        - amount
        - currency
        - pay_to_email
        - transactions
      properties:
        checkout_reference:
          type: string
          description: Unique ID of the payment checkout specified by the client application.
        amount:
          type: number
          format: float
          description: Amount of the payment.
        currency:
          $ref: "#/components/schemas/currency"
        pay_to_email:
          type: string
          format: email
          description: Email address of the registered user (merchant) to whom the payment is made.
        pay_from_email:
          type: string
          format: email
          description: Email address of the registered user (merchant) who is making the payment.
        description:
          type: string
          description: Short description of the payment. When applicable, this description is also included in the payment receipt.
        return_url:
          type: string
          format: uri
          description: URL to which the SumUp platform sends the final status (`SUCCESSFUL` or `FAILED`) of the checkout payment.
        transactions:
          type: array
          description: List of transactions related to the payment.
          readOnly: true
          uniqueItems: true
          items:
            $ref: "#/components/schemas/transactionBaseExtended"
    checkoutProcessCommon:
      type: object
      required:
        - payment_type
      properties:
        payment_type:
          type: string
          description: Type of payment to use for processing the checkout.
          enum:
            - card
            - direct_debit
            - balance
            # - moto
            # - boleto
        installments:
          type: integer
          description: Number of installments for recurring payments. #FIXME
          minimum: 1
    checkoutProcessCard:
      allOf:
        - $ref: "#/components/schemas/checkoutProcessCommon"
        - type: object
          required:
            - card
          properties:
            card:
              $ref: "#/components/schemas/card"
    checkoutProcessToken:
      allOf:
        - $ref: "#/components/schemas/checkoutProcessCommon"
        - type: object
          required:
            - token
            - customer_id
          properties:
            customer_id:
              type: string
              description: Unique ID of the customer who is making the payment.
            token:
              type: string
              description: Unique token identifying the saved payment instrument for this customer.
    checkoutResponseBasic:
      allOf:
        - $ref: "#/components/schemas/checkoutCreate"
        - type: object
          required:
            - id
            - status
            - date
          properties:
            id:
              type: string
              description: Unique ID of the checkout.
              readOnly: true
            status:
              type: string
              description: Currrent status of the checkout.
              readOnly: true
              enum:
                - PENDING
                - FAILED
                - PAID
            date:
              type: string
              format: date-time
              description: Date and time of the creation of the payment checkout.
              readOnly: true
            valid_until:
              type: string
              format: date-time
              description: Date and time of the checkout expiration before which the client application needs to send a processing request. If no value is present, the checkout does not have an expiration time.
              readOnly: true
              nullable: true
            client_id:
              type: string
              description: ID of the client application that created the checkout. # FIXME Verify this!!!
              readOnly: true
    checkoutResponseExtended:
      allOf:
        - $ref: "#/components/schemas/checkoutResponseBasic"
        - type: object
          required:
            - transaction_code
            - transaction_id
          properties:
            transaction_code:
              type: string
              description: Transaction code of the successful transaction with which the payment for the checkout is completed. # Returned only when the checkout status is successful.
              readOnly: true
            transaction_id:
              type: string
              description: Transaction ID of the successful transaction with which the payment for the checkout is completed. # Returned only when the checkout status is successful.
              readOnly: true
            # # token: TOFIX - this is not true?
              #   type: string
              #   description: Card token of the payment instrument with which the payment for the checkout is completed successfully. Returned only when the checkout is processed with a tokenized card.
              #   readOnly: true
    currency:
      type: string
      description: Three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the currency for the amount of the payment. Possible values are only from the list of supported currencies.
      enum:
        - BGN
        - BRL
        - CHF
        - CLP
        - CZK
        - DKK
        - EUR
        - GBP
        - HRK
        - HUF
        - NOK
        - PLN
        - RON
        - RUB
        - SEK
        - USD
    # models related to customer's payment instruments
    customerDetails:
      type: object
      description: Details of the customer.
      required:
        - customer_id
        - personal_details
      properties:
        customer_id:
          type: string
          description: Unique ID of the customer.
        personal_details:
          $ref: "#/components/schemas/personalDetails"
      # # client_id:
        #   type: string
        #   description: FIXME Is this still used?
    personalDetails:
      type: object
      description: Personal details for the customer.
      properties:
        first_name:
          type: string
          description: First name of the customer. Required for SEPA Direct Debit mandates.
        last_name:
          type: string
          description: Last name of the customer. Required for SEPA Direct Debit mandates.
        email:
          type: string
          description: Registered email address of the customer.
        phone:
          type: string
          description: Registered phone number of the customer. Required for SEPA Direct Debit mandates.
        address:
          $ref: "#/components/schemas/address"
    address:
      type: object
      description: Details of the registered address. Required for SEPA Direct Debit mandates.
      required:
        - city
        - country
        - line1
        - postal_code
      properties:
        city:
          type: string
          description: City name from the registered address.
        country:
          type: string
          description: Country name from the registered address. The name must be in English.
        line1:
          type: string
          description: First line of the registered address with details of the street name and number.
        line2:
          type: string
          description: Second line of the registed address with detials of the building, unit, apartment, and floor numbers. Required for SEPA Direct Debit mandates.
        postal_code:
          type: string
          description: Postal code from the registered.
        state:
          type: string
          description: State name or abbreviation from the registered address. Required for SEPA Direct Debit mandates.
    # FIXME Figure out the discriminator shit
    paymentInstrumentFull:
      type: object
      description: Details of the saved payment instrument.
      required:
        - type
      # # discriminator:
        #   propertyName: type
        #   mapping:
        #     token: "#/components/schemas/paymentInstrumentCard"
        #     direct_debit: "#/components/schemas/sepaDetailsFull"
        # properties:
      allOf:
        - $ref: "#/components/schemas/paymentInstrumentCard"
        - type: object
          properties:
            type:
              type: string
              description: Type of the saved payment instrument.
              enum:
                - card
                - direct_debit
    paymentInstrumentCard:
      type: object
      required:
        - token
        - active
        - card
      properties:
        token:
          type: string
          description: Unique token identifying the payment card.
          readOnly: true
        active:
          type: boolean
          description: Indicates whether the saved card is an active payment instrument and can be used for payments. To deactivate the payment instrument, send a `DELETE` request to the resource endpoint.
          readOnly: true
        card:
          $ref: "#/components/schemas/card"
    card:
      type: object
      description: Details of the payment card.
      required:
        - name
        - number
        - expiry_month
        - expiry_year
        - cvv
        - last_4_digits
        - type
      properties:
        name:
          type: string
          description: Full name of the cardholder as it appears on the payment card.
          writeOnly: true
        number:
          type: string
          description: Number of the payment card (without spaces).
          writeOnly: true
        expiry_year:
          type: string
          description: Year from the expiration time of the payment card. Accepted formats are `YY` and `YYYY`.
          writeOnly: true
        expiry_month:
          type: string
          description: Month from the expiration time of the payment card. Accepted format is `MM`.
          writeOnly: true
          enum:
            - '01'
            - '02'
            - '03'
            - '04'
            - '05'
            - '06'
            - '07'
            - '08'
            - '09'
            - '10'
            - '11'
            - '12'
        cvv:
          type: string
          description: Three-digit card verification value (security code) of the payment card.
          writeOnly: true
          maxLength: 3
          minLength: 3
        last_4_digits:
          type: string
          description: Last 4 digits from the payment card number.
          readOnly: true
        type:
          type: string
          description: Issuing card network of the payment card.
          readOnly: true
          enum:
            - AMEX
            - CUP
            - DINERS
            - DISCOVER
            - ELO
            - ELV
            - HIPERCARD
            - JCB
            - MAESTRO
            - MASTERCARD
            - VISA
            - VISA_ELECTRON
            - VISA_VPAY
            - UNKNOWN
    sepaDetailsFull:
      allOf:
        - $ref: "#/components/schemas/sepaDetailsSimple"
        - $ref: "#/components/schemas/sepaDetailsRecur"
    sepaDetailsSimple:
      type: object
      description: Details of the SEPA Direct Debit mandate.
      properties:
        iban:
          type: string
          description: IBAN of the account for which the payment instrument is configured.
          writeOnly: true
          maxLength: 34
          pattern: '^[A-Z0-9]+$'
        company_name:
          type: string
          description: Name of the company that holds the bank account (if applicable).
        mandate_reference:
          type: string
          description: Unique ID of the SEPA Direct Debit mandate. The value is also used as the payment instrument identifier.
          readOnly: true
        masked_iban:
          type: string
          description: Masked version of the IBAN for the payment instrument where only the first 2 characters and the last 5 characters from the full IBAN are visible and all other characters are replaced by asterisks (`*`).
          readOnly: true
        swift:
          type: string
          description: SWIFT code of the bank maintaining the account.
          readOnly: true
    sepaDetailsRecur:
      type: object
      description: Details of the SEPA Direct Debit mandate.
      properties:
        is_recurring:
          type: boolean
          description: Indicates whether the mandate is for a recurring payment.
          default: false # FIXME Verify this
    transactionBase:
      type: object
      description: Details of the transaction.
      properties:
        id:
          type: string
          description: Unique ID of the transaction.
        transaction_code:
          type: string
          description: Transaction code returned by the acquirer/processing entity after processing the transaction.
        amount:
          type: number
          format: float
          description: Total amount of the transaction.
        currency:
          $ref: "#/components/schemas/currency"
        timestamp:
          type: string
          format: date-time
          description: Date and time of the creation of the transaction.
        status:
          type: string
          description: Current status of the transaction.
          enum:
            - AUTH
            - CANCELLED
            - CAPTURED
            - CC_CUSTOMER_ENTRY_CANCELLED
            - CC_CUSTOMER_ENTRY_PENDING
            - CHARGE_BACK
            - CHARGEBACK_COLLECTED
            - CHARGEBACK_REVERSAL
            - DECLINED_ACQUIRER
            - DECLINED_CARD
            - DECLINED_INTERNAL
            - MISMATCHED
            - NON_COLLECTION
            - NOT_SENT_TO_ACQUIRER
            - PAID_OUT
            - PAYOUT_CALCULATED
            - PAYOUT_CREATED
            - PAYOUT_FAILED
            - RECONCILED
            - REFUND_FAILED
            - REFUND_PENDING
            - REFUNDED
            - REPORTED_FRAUD
            - RETRIEVAL_REQUEST
            - REVERSAL_FAILED
            - REVERSED
            - ROGER_THAT
            - SETTLED
            - SETTLED_FOR_DECLINED
            - SYSTEM_ERROR
            - TIMED_OUT
            - UNKNOWN
            - WITHHELD
        payment_type:
          type: string
          description: Payment type used for the transaction.
          enum:
            - BALANCE
            - BITCOIN
            - BOLETO
            - CASH
            - ECOM
            - POS
            - RECURRING
            - UNKNOWN
        installments_count:
          type: integer
          description: Current number of installment payments.
          minimum: 1
    transactionBaseExtended:
      type: object
      properties:
        merchant_code:
          type: string
          description: Unique code of the registered merchant to whom the payment is made.
        vat_amount:
          type: number
          format: float
          description: Amount of the applicable VAT (out of the total transaction amount).
        tip_amount:
          type: number
          format: float
          description: Amount of the tip (out of the total transaction amount).
        entry_mode:  # FIXME check what are the possible values
          type: string
          description: Entry mode of the transaction. # FIXME
          enum:
            - BOLETO
            - CHIP
            - CONTACTLESS
            - CONTACTLESS_MAGSTRIPE
            - customer entry
            - DIRECT_DEBIT
            - MAGSTRIPE
            - MAGSTRIPE_FALLBACK
            - MANUAL_ENTRY
            - MOTO
            - NONE
        internal_id:
          type: integer
          description: Internal unique ID of the transaction on the SumUp platform.
        auth_code:
          type: string
          description: Authorization code for the transaction sent by the payment card issuer or bank. Applicable only to card payments.
    transactionHistoryBase:
      type: object
      properties:
        product_summary:
          type: string
          description: Short description of the payment. The value is taken from the `description` property of the related checkout resource.
        payouts_total: # FIXME reusable
          type: integer
          description: Total number of payouts to the registered user specified in the `user` property.
        payouts_received: # FIXME reusable
          type: integer
          description: Number of payouts that are made to the registered user specified in the `user` property.
        payout_plan: # FIXME reusable
          type: string
          description: Payout plan of the registered user at the time when the transaction was made. # FIXME
          enum:
            - SINGLE_PAYMENT
            - TRUE_INSTALLMENT
            - ACCELERATED_INSTALLMENT
    transactionHistory:
      allOf:
        - $ref: "#/components/schemas/transactionBase"
        - $ref: "#/components/schemas/transactionHistoryBase"
        - type: object
          properties:
            transaction_id:
              type: string
              description:  Unique ID of the transaction. Same as the value of the `id` property.
            user:
              type: string
              format: email
              description: Email address of the registered user on the SumUp platform to whom the payment is made.
            type:
              type: string
              description: Type of the transaction for the registered user specified in the `user` property.
              enum:
                - PAYMENT
                - REFUND
                - CHARGE_BACK
            card_type:
              type: string
              description: Issuing card network of the payment card used for the transaction.
              enum:
                - AMEX
                - CUP
                - DINERS
                - DISCOVER
                - ELO
                - ELV
                - HIPERCARD
                - JCB
                - MAESTRO
                - MASTERCARD
                - VISA
                - VISA_ELECTRON
                - VISA_VPAY
                - UNKNOWN
    transactionFull:
      allOf:
        - $ref: "#/components/schemas/transactionBase"
        - $ref: "#/components/schemas/transactionBaseExtended"
        - $ref: "#/components/schemas/transactionHistoryBase"
        - type: object
          properties:
            username:
              type: string
              format: email
              description: Email address of the registered user on the SumUp platform to whom the payment is made.
            lat:
              $ref: "#/components/schemas/lat"
            lon:
              $ref: "#/components/schemas/lon"
            horizontal_accuracy:
              $ref: "#/components/schemas/horizontal_accuracy"
            simple_payment_type:
              type: string
              description: FIXME
              enum:
                - CASH
                - CC_SIGNATURE
                - ELV
                - CC_CUSTOMER_ENTERED
                - MANUAL_ENTRY
                - EMV
                - MOTO
            verification_method:
              type: string
              description: FIXME
              enum:
                - none
                - signature
                - offline pin
                - online pin
                - offline pin and signature
                - confirmation code verified
            card:
              $ref: "#/components/schemas/card"
            local_time:
              type: string
              format: date-time
              description: Local date and time of the creation of the transaction.
            payout_type:
              type: string
              description: Payout method for the transaction amount.
              enum:
                - BANK_ACCOUNT
                - PREPAID_CARD
                - BALANCE
            products:
              type: array
              description: List of products from the merchant's catalog for which the transaction serves as a payment.
              items:
                $ref: "#/components/schemas/product"
            vat_rates: # Define separate model
              type: array
              description: List of VAT rates applicable to the transaction.
              items: {}
            transaction_events:
              type: array
              description: List of transaction events related to the transaction.
              items:
                $ref: "#/components/schemas/transactionEvent"
            simple_status:
              type: string
              description: Status generated fromthe processing status and the latest transaction state.
              enum:
                - CANCEL_FAILED
                - CANCELLED
                - CHARGEBACK
                - FAILED
                - REFUND_FAILED
                - REFUNDED
                - SUCCESSFUL
            links:
              type: array
              description: List of hyperlinks for accessing related resources.
              uniqueItems: true
              items:
                $ref: "#/components/schemas/link"
            location:
              type: object
              description: Details of the payment location as received from the payment terminal.
              properties:
                lat:
                  $ref: "#/components/schemas/lat"
                lon:
                  $ref: "#/components/schemas/lon"
                horizontal_accuracy:
                  $ref: "#/components/schemas/horizontal_accuracy"
            tax_enabled:
              type: boolean
              description: Indicates whether tax deduction is enabled for the transaction.
    transactionEvent:
      type: object
      description: FIXME
      properties:
        id:
          type: integer
          description: Unique ID of the transaction event.
        event_type:
          type: string
          description: Type of the transaction event.
          enum:
            - PAYOUT
            - CHARGE_BACK
            - REFUND
            #- PAYOUT_DEDUCTION
        status:
          type: string
          description: Status of the transaction event.
          # enum:
          #   - FAILED
        amount:
          type: number
          format: float
          description: Amount of the transaction event.
        due_date:
          type: string
          format: date
          description: Date when the transaction event is due to occur.
        date:
          type: string
          format: date
          description: Date when the transaction event actually occurred.
        installment_number:
          type: integer
          description: The number of the installment that is paid. Applicable only payout events, i.e. `event_type = PAYOUT`.
        timestamp:
          type: string
          format: date-time
          description: Date and time of the creation of the transaction event.
    product:
      type: object
      description: FIXME
      properties:
        name:
          type: string
          description: Name of the product from the merchant's catalog.
        price:
          type: number
          format: float
          description: Price of the product without VAT.
        vat_rate:
          type: number
          format: float
          description: VAT rate applicable to the product.
        single_vat_amount:
          type: number
          format: float
          description: Amount of the VAT for a single product item (calculated as the product of `price` and `vat_rate`, i.e. `single_vat_amount = price * vat_rate`).
        price_with_vat:
          type: number
          format: float
          description: Price of a single product item with VAT.
        vat_amount:
          type: number
          format: float
          description: Total VAT amount for the purchase (calculated as the product of `single_vat_amount` and `quantity`, i.e. `vat_amount = single_vat_amount * quantity`).
        quantity:
          type: number
          description: Number of product items for the purchase.
        total_price:
          type: number
          format: float
          description: Total price of the product items without VAT (calculated as the product of `price` and `quantity`, i.e. `total_price = price * quantity`).
        total_with_vat:
          type: number
          format: float
          description: Total price of the product items including VAT (calculated as the product of `price_with_vat` and `quantity`, i.e. `total_with_vat = price_with_vat * quantity`).
    link:
      type: object
      description: Details of a link to a related resource.
      properties:
        rel:
          type: string
          description: Specifies the relation of the resource to the current resource.
        href:
          type: string
          format: uri
          description: URL for accessing the related resource.
        type:
          type: string
          description: Specifies the media type of the related resource.
    lat:
      type: number
      format: float
      description: Latitude value from the coordinates of the payment location (as received from the payment terminal).
      minItems: 0
      maximum: 90
    lon:
      type: number
      format: float
      description: Longitude value from the coordinates of the payment location (as received from the payment terminal).
      minItems: 0
      maximum: 180
    horizontal_accuracy:
      type: number
      format: float
      description: Indication of the precision of the geographical position received from the payment terminal. Possible values are in the range `0-1`. FIXME
      minimum: 0
      maximum: 1
    errorBasic:
      type: object
      description: Common structure of errror messages.
      required:
        - message
        - error_code
      properties:
        message:
          type: string
          description: Short message descibing the error.
        error_code:
          type: string
          description: Configured error code for the error.
    errorExtended:
      allOf:
        - $ref: "#/components/schemas/errorBasic"
        - type: object
          required:
            - param
          properties:
            param:
              type: string
              description: Parameter name (with relative location) to which the error applies. Parameters from embedded resources are displayed using dot notation.
  responses:
    checkoutCreateResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/checkoutResponseBasic"
    checkoutProcessResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/checkoutResponseExtended"
    checkoutListResponse:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/checkoutResponseExtended"
    checkoutResponse:
      description: OK
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/checkoutResponseBasic"
              - $ref: "#/components/schemas/checkoutResponseExtended"
    customerResponse:
      description: Details of the saved customer.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/customerDetails"
    paymentInstrumentList:
      description: OK
      content:
        application/json:
          schema:
            type: array
            maxItems: 4
            items:
              $ref: "#/components/schemas/paymentInstrumentFull"
    paymentInstrumentResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/paymentInstrumentCard"
    transactionHistoryResponse:
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - items
            properties:
              items:
                type: array
                items:
                  $ref: "#/components/schemas/transactionHistory"
              links:
                type: array
                items:
                  $ref: "#/components/schemas/link"
    transactionResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/transactionFull"
    errorBadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorExtended"
          examples:
            missingParameter:
              description: A required parameter is missing.
              value: {"message":"Validation error","error_code":"MISSING","param":"pay_to_email"}
            invalidParameter:
              description: A required parameters has an invalid value.
              value: {"message":"Validation error","error_code":"INVALID","param":"card.expiry_year"}
    errorNotAuthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorBasic"
          examples:
            invalidToken:
              description: Your access token is invalid or expired.
              value: {"error_message":"invalid access token","error_code":"NOT_AUTHORIZED"}
            missingToken:
              description: No access token is provided.
              value: {"message":"Not authorized","error_code":"NOT_AUTHORIZED"}
            authFailure:
              description: Your authorization request failed due to invalid parameters.
              value: {"error_message":"authentication failed","error_code":"NOT_AUTHORIZED"}
    errorForbidden: # TOFIX Rework the model (names) for consistency with other error responses.
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            description: Common structure of errror messages.
            required:
              - error_message
              - error_code
              - status_code
            properties:
              message:
                type: string
                description: Short message descibing the error.
              error_code:
                type: string
                description: Configured error code for the error.
              status_code:
                type: string
                description: HTTP status code for the error.
          example:
            description: You do not have a required scopes for making this request.
            value: {"error_message":"request_not_allowed","error_code":"FORBIDDEN","status_code":403}
    errorNotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorBasic"
          example:
            description: An identified resource is not found on the server.
            value: {"error_code":"NOT_FOUND","message":"Resource not found"}
    errorConflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorBasic"
          examples:
            existingCheckout:
              description: A resource with the specified parameters already exists on the server.
              value: {"error_code":"DUPLICATED_CHECKOUT","message":"Checkout with this checkout reference and pay to email already exists"}
            existingCustomer:
              description: A resource with the specified identifier already exists on the server.
              value: {"message":"Customer already exists","error_code":"CUSTOMER_ALREADY_EXISTS"}
            insufficientBalance:
              description: The specified payment instrument does not have enough balance to process the payment.
              value: {"error_code":"INSUFFICIENT_BALANCE","message":"Sender balance not enough to cover the payment"}
            maxPINumber:
              description: Maximum number of payment instruments per customer is reached. Currently, the maximum allowed number is 4.
              value: {"error_code":"MAX_INSTRUMENT_COUNT","message":"Max number of payment instruments on file reached"}
            checkoutProcessed:
              description: The specified checkout resource is already processed and cannot be deactivated.
              value: {"error_code":"CHECKOUT_PROCESSED","message":"Checkout is already processed"}
  parameters:
    checkoutId:
      name: id
      in: path
      required: true
      description: Unique ID of the checkout resource.
      schema:
        type: string
    customerId:
      name: customer_id
      in: path
      required: true
      description: Unique ID of the customer resource.
      schema:
        type: string
    token:
      name: token
      in: path
      required: true
      description: Unique token identifying the card saved as a payment instrument resource.
      schema:
        type: string
    checkoutReference:
      name: checkout_reference
      in: query
      description: Filters the list of checkout resources by the unique ID of the checkout.
      required: false
      schema:
        type: string
    clientTransactionId:
      name: client_transaction_id
      in: query
      description: Filters the list of checkout resources by client transaction ID. When you use this option, you also need to specify the merchant code in the `merchant_code` query parameter.
      required: false
      schema:
        type: string
    merchantCode:
      name: merchant_code
      in: query
      description: Filters the list of checkout resources by merchant code. This parameter is required when you are using the `client_transaction_id` query parameter for filtering the results.
      required: false
      schema:
        type: string
    transactionId:
      name: id
      in: query
      description: Retrieves the transaction resource with the specified transaction ID (the `id` parameter in the transaction resource).
      required: false
      schema:
        type: string
    transactionInternalId:
      name: internal_id
      in: query
      description: Retrieves the transaction resource with the specified internal transaction ID (the `internal_id` parameter in the transaction resource).
      required: false
      schema:
        type: string
    transactionCode:
      name: transaction_code
      in: query
      description: Retrieves the transaction resource with the specified transaction ID (the `transaction_code` parameter in the transaction resource).
      required: false
      schema:
        type: string
    order:
      name: order
      in: query
      description: Specifies the order in which the returned results are displayed.
      schema:
        type: string
        enum:
          - ascending
          - descending
        default:
          - ascending
    limit:
      name: limit
      in: query
      description: Specifies the maximum number of results returned per page.
      schema:
        type: integer
    userId:
      name: user_id
      in: query
      description: |
        Filters the results and returns only transaction resources associated with the specified user. The user can be identified via one of the following parameters:
          * email
          * masked merchant ID
          * original user ID

        If you do not specify user identification, the response contains transaction resources associated with the currently authenticated user account.
      required: false
      schema:
        type: string
    users:
      name: users
      in: query
      description: Filters the returned results by user email.
      required: false
      schema:
        type: array
        items:
          type: string
          format: email
    geoCoordinates:
      name: geo_coordinates
      in: query
      description: |
        Filters the results by the geographical coordinates of the location where the transaction is made (as retrieved from the terminal device) and returns only results that fall within the specified rectangular area. The accepted format is a comma-separated list of coordinate points that form a rectangle defined by the following parameters:
          * `southwest_lng` (for the longitude value of the southwestern edge of the rectangle)
          * `southwest_lat` (for the latitude value of the southwestern edge of the rectangle)
          * `northeast_lng` (for the longitude value of the northeastern edge of the rectangle)
          * `northeast_lat` (for the latitude value of the northeastern edge of the rectangle)
      required: false
      schema:
        type: string
    readers:
      name: readers
      in: query
      description: Filters the returned results by the specified list of serial numbers of the terminal readers used for the transactions.
      required: false
      schema:
        type: array
        items:
          type: string
    statuses:
      name: statuses
      in: query
      description: Filters the returned results by the specified list of final statuses of the transactions.
      required: false
      schema:
        type: array
        items:
          type: string
          enum:
            - SUCCESSFUL
            - CANCELLED
            - FAILED
    paymentTypes:
      name: payment_types
      in: query
      description: Filters the returned results by the specified list of payment types used for the transactions.
      required: false
      schema:
        type: array
        items:
          type: string
          enum:
            - CASH
            - POS
            - ECOM
            - BITCOIN
            - BALANCE
    types:
      name: types
      in: query
      description: Filters the returned results by the specified list of transaction types.
      required: false
      schema:
        type: array
        items:
          type: string
          enum:
            - PAYMENT
            - REFUND
            - CHARGE_BACK
    changesSince:
      name: changes_since
      in: query
      description: Filters the results by the latest modification time of resources and returns only transactions that are modified after the specified timestamp (in ISO8601 format).
      required: false
      schema:
        type: string
        format: date-time
    newestTime:
      name: newest_time
      in: query
      description: Filters the results by the creation time of resources and returns only transactions that are created before the specified timestamp (in ISO8601 format).
      required: false
      schema:
        type: string
        format: date-time
    newestRef:
      name: newest_ref
      in: query
      description: Filters the results by the reference ID of transaciton events and returns only transactions with events whose IDs are smaller than the specified value. This parameters supersedes the `newestTime` parameter (if both are provided in the request).
      required: false
      schema:
        type: string
    oldestTime:
      name: oldest_time
      in: query
      description: Filters the results by the creation time of resources and returns only transactions that are created after the specified timestamp (in ISO8601 format).
      required: false
      schema:
        type: string
        format: date-time
    oldestRef:
      name: oldest_ref
      in: query
      description: Filters the results by the reference ID of transaciton events and returns only transactions with events whose IDs are greater than the specified value. This parameters supersedes the `oldestTime` parameter (if both are provided in the request).
      required: false
      schema:
        type: string

  # # foreignTransactionId:
    #   name: foreign_transaction_id
    #   in: query
    #   description: Retrieves the transaction resource with the specified external (foreign) transaction ID (the `id` parameter in the transaction resource).
    #   required:
    #   schema:
    #     type: string
    # clientTransactionIdTrx:
    #   name: client_transaction_id
    #   in: query
    #   description: Retrieves the transaction resource with the specified client transaction ID (the `client_transaction_id` parameter in the transaction resource).
    #   required:
    #   schema:
    #     type: string
    eventStatuses:
      name: event_statuses
      in: query
      description: Filters the returned transaction events in the transaction resource by the speficied transaction event statuses.
      required: false
      schema:
        type: array
        items:
          type: string
          enum: # FIXME List all possible values
            - FAILED
            - SUCCESSFUL
    eventTypes:
      name: event_types
      in: query
      description: Filters the returned transaction events in the transaction resource by specified transaction event types.
      required: false
      schema:
        type: array
        items:
          type: string
          enum:
            - PAYOUT
            - REFUND
            - CHARGE_BACK
            #- PAYOUT_DEDUCTION
  requestBodies:
    checkoutCreate:
      description: Details of the payment checkout.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/checkoutCreate"
    checkoutProcess:
      description: Details of the payment instrument for processing the checkout.
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/checkoutProcessCard"
              - $ref: "#/components/schemas/checkoutProcessToken"
    refundRequest:
      description: Amount for partial refunds.
      content:
        application/json:
          schema:
            type: object
            description: Optional amount for partial refunds of transactions.
            properties:
              amount:
                type: number
                format: float
                description: Amount to refund for this transaction. The value cannot exceed the amount of the transaction. If you do not specify a value, the system refunds the full amount of the transaction.
    customerRequest:
      description: Details of the saved customer.
      content:
        application/json:
          schema:
            type: object
            properties:
              personal_details:
                $ref: "#/components/schemas/personalDetails"
    customerCreateRequest:
      description: Details of the saved customer.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/customerDetails"
    paymentInstrumentRequest:
      description: Details of the payment instrument.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/paymentInstrumentFull"
  # # sepaDdCreateRequest:
    #   description: Details for creating a new SEPA Direct Debit mandate as a payment instrument.
    #   content:
    #     application/json:
    #       schema:
    #         - $ref: "#/components/schemas/sepaDetailsFull"
    # sepaDdUpdateRequest:
    #   description: Details for updating an existing SEPA Direct Debit mandate as a payment instrument.
    #   content:
    #     application/json:
    #       schema:
    #         - $ref: "#/components/schemas/sepaDetails"
    # customerDdRequest:
    #   # for sepaDD, the following fields are required:
    #   required:
    #     - customer_id
    #     - personal_details
    #       - first_name
    #       - last_name
    #       - phone
    #       - address
    #         - line1
    #         - line2
    #         - country
    #         - postal_code
    #         - city
    #         - state
  # examples:
  # headers:
  securitySchemes:
    accessToken:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://api.sumup.com/authorize
          tokenUrl: https://api.sumup.com/token
          refreshUrl: https://api.sumup.com/token
          scopes:
            payments: Make payments by creating and processing checkouts.
            transactions.history: View your transactions and transaction history.
            user.profile_readonly: View your user profile details.
            user.app-settings: View and manage the settings of your client application.
            balance: View and manage your payout balance.
          # # user.profile: View and manage your user profile
            # user.payout-settings: View and manage your payout settings
            # user.subaccounts: View and manage the user profile details of your employees
            # products: View and manage products, shelves, prices, and VAT rates
            # boleto: Process boleto checkouts
            # referrals.reports:
            # referrals.post:
            # referrals.payout:
            sepa_dd: Manage SEPA Direct Debit mandates for customers.
            payments_instruments: Manage customers and their payment instruments.
        clientCredentials:
          # authorizationUrl: https://api.sumup.com/authorize
          tokenUrl: https://api.sumup.com/token
          scopes:
            payments: Make payments by creating and processing checkouts.
            transactions.history: View your transactions and transaction history.
            # user.profile_readonly: View your user profile details.
            user.app-settings: View and manage the settings of your client application.
            balance: View and manage your payout balance.
          # # user.profile: View and manage your user profile
            # user.payout-settings: View and manage your payout settings
            # user.subaccounts: View and manage the user profile details of your employees
            # products: View and manage products, shelves, prices, and VAT rates
            # boleto: Process boleto checkouts
            # referrals.reports:
            # referrals.post:
            # referrals.payout:
            payments_instruments: Manage customers and their payment instruments.
  # links:
  # callbacks:
