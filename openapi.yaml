openapi: "3.0.1"
info:
  title: SumUp REST API
  version: 1.0.0
  contact:
    email: dev@sumup.com
servers:
  - url: https://api.sumup.com/{version}
    description: Production server
    variables:
      version:
        default: v0.1
        description: Version of the API.
# Template for future sandbox/test server
  # - url: https://api-sandbox.sumup.com/{version}
  #   description: Sandbox server
  #   variables:
  #     version:
  #       default: v0.1
  #       description: Version of the API.
tags:
  - name: Checkouts
    description: View and manage payment checkouts.
  - name: Customers
    description: View and manage saved customers and their payment instruments.
  - name: Transactions
    description: View transactions.
paths:
  /checkouts:
    # DEBUG - this endpoint always returns an empty array.
    get:
      summary: List checkouts
      description: Lists all checkout resources.
      tags:
        - Checkouts
      security:
        - accessToken:
          - payments
      parameters:
        - $ref: "#/components/parameters/CheckoutReference"
        - $ref: "#/components/parameters/ClientTransactionID"
        - $ref: "#/components/parameters/MerchantCode"
      responses:
        "200":
          $ref: "#/components/responses/CheckoutList"
        "401":
          $ref: "#/components/responses/ErrorNotAuthorized"
    post:
      summary: Create a checkout
      description: Creates a new payment checkout resource.
      tags:
        - Checkouts
      security:
        - accessToken:
          - payments
      requestBody:
        $ref: "#/components/requestBodies/CheckoutCreate"
      responses:
        "201":
          $ref: "#/components/responses/CheckoutCreate"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorExtended"
              examples:
                Missing_Parameter:
                  description: A required parameter is missing.
                  value: {"message":"Validation error","error_code":"MISSING","param":"pay_to_email"}
        "401":
          $ref: "#/components/responses/ErrorNotAuthorized"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Existing_Checkout:
                  description: A resource with the specified parameters already exists on the server.
                  value: {"error_code":"DUPLICATED_CHECKOUT","message":"Checkout with this checkout reference and pay to email already exists"}
  /checkouts/{id}:
    parameters:
      - $ref: "#/components/parameters/CheckoutID"
    get:
      summary: Retrieve a checkout
      description: Retrieves an identified checkout resource.
      tags:
        - Checkouts
      security:
        - accessToken:
          - payments
      responses:
        "200":
          $ref: "#/components/responses/CheckoutProcess"
        "401":
          $ref: "#/components/responses/ErrorNotAuthorized"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
    put:
      summary: Process a checkout
      description: Processes an identified checkout resource with the specified payment instrument and create a transaction.
      tags:
        - Checkouts
      security:
        - accessToken:
          - payments
      requestBody:
        $ref: "#/components/requestBodies/CheckoutProcess"
      responses:
        "200":
          $ref: "#/components/responses/CheckoutProcess"
        "400":
          $ref: "#/components/responses/ErrorBadRequest"
        "401":
          $ref: "#/components/responses/ErrorNotAuthorized"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
        "409":
          $ref: "#/components/responses/ErrorConflict"
    delete:
      summary: Deactivate a checkout
      description: Deactivates an identified checkout resource.
      tags:
        - Checkouts
      security:
        - accessToken:
          - payments
      responses:
        "204":
          description: OK
        "401":
          $ref: "#/components/responses/ErrorNotAuthorized"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
        "409":
          $ref: "#/components/responses/ErrorConflict"
  /customers:
    post:
      summary: Create a customer
      description: Creates a new saved customer resource.
      tags:
        - Customers
      security:
        - accessToken:
          - payment_instruments
      requestBody:
        $ref: "#/components/requestBodies/CustomerCreate"
      responses:
        "201":
          $ref: "#/components/responses/Customer"
        "401":
          $ref: "#/components/responses/ErrorNotAuthorized"
        "403":
          $ref: "#/components/responses/ErrorForbidden"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Existing_Customer:
                  description: A resource with the specified identifier already exists on the server.
                  value: {"message":"Customer already exists","error_code":"CUSTOMER_ALREADY_EXISTS"}
  /customers/{customer_id}:
    parameters:
      - $ref: "#/components/parameters/CustomerID"
    get:
      summary: Retrieve a customer
      description: Retrieves an identified saved customer resource.
      tags:
        - Customers
      security:
        - accessToken:
          - payment_instruments
      responses:
        "200":
          $ref: "#/components/responses/Customer"
        "401":
          $ref: "#/components/responses/ErrorNotAuthorized"
        "403":
          $ref: "#/components/responses/ErrorForbidden"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
    put:
      summary: Update a customer
      description: Updates an identified saved customer resource.
      tags:
        - Customers
      security:
        - accessToken:
          - payment_instruments
      requestBody:
        $ref: "#/components/requestBodies/CustomerUpdate"
      responses:
        "200":
          $ref: "#/components/responses/Customer"
        "401":
          $ref: "#/components/responses/ErrorNotAuthorized"
        "403":
          $ref: "#/components/responses/ErrorForbidden"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
  /customers/{customer_id}/payment-instruments:
    parameters:
      - $ref: "#/components/parameters/CustomerID"
    get:
      summary: List payment instruments
      description: Lists all payment instrument resources that are saved for an identified customer.
      tags:
        - Customers
      security:
        - accessToken:
          - payment_instruments
      responses:
        "200":
          $ref: "#/components/responses/PaymentInstrumentList"
        "401":
          $ref: "#/components/responses/ErrorNotAuthorized"
        "403":
          $ref: "#/components/responses/ErrorForbidden"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
    post:
      summary: Create a payment instrument
      description: Creates and activates a new payment instrument resource by saving a payment card for an identified customer.
      tags:
        - Customers
      security:
        - accessToken:
          - payment_instruments
      requestBody:
        $ref: "#/components/requestBodies/PaymentInstrument"
      responses:
        "200":
          $ref: "#/components/responses/PaymentInstrument"
        "400":
          $ref: "#/components/responses/ErrorBadRequest"
        "401":
          $ref: "#/components/responses/ErrorNotAuthorized"
        "403":
          $ref: "#/components/responses/ErrorForbidden"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Checkout_Processed:
                  description: The maximum number of payment instruments per customer is reached. Currently, the maximum allowed number is 4.
                  value: {"error_code":"MAX_INSTRUMENT_COUNT","message":"Max number of payment instruments on file reached"}
  /customers/{customer_id}/payment-instruments/{token}:
    parameters:
      - $ref: "#/components/parameters/CustomerID"
      - $ref: "#/components/parameters/Token"
    delete:
      summary: Deactivate a payment instrument
      description: Deactivates an identified card payment instrument resource for a customer.
      tags:
        - Customers
      security:
        - accessToken:
          - payment_instruments
      responses:
        "204":
          description: OK
        "401":
          $ref: "#/components/responses/ErrorNotAuthorized"
        "403":
          $ref: "#/components/responses/ErrorForbidden"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
  /me/refund/{txn_id}:
    parameters:
      - $ref: "#/components/parameters/TxnID"
    post:
      summary: Refund a transaction
      description: Refunds an identified transaction either in full or partially.
      tags:
        - Transactions
      security:
        - accessToken:
          - payments
      requestBody:
          $ref: "#/components/requestBodies/Refund"
      responses:
        "204":
          description: OK
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                Transaction_Not_Refundable:
                  description: The state of the identified transaction resource does not permit the requested operation.
                  value: {"error_code":"CONFLICT","message":"The transaction is not refundable in its current state"}
  /me/transactions/history:
    get:
      summary: List transactions
      description: Lists a history of all transactions associated with the merchant account.
      tags:
        - Transactions
      security:
        - accessToken:
          - transactions.history
      parameters:
        - $ref: "#/components/parameters/TransactionCode"
        - $ref: "#/components/parameters/OrderFilter"
        - $ref: "#/components/parameters/LimitFilter"
        - $ref: "#/components/parameters/UserIDFilter"
        - $ref: "#/components/parameters/UsersFilter"
        - $ref: "#/components/parameters/GeoCoordinatesFilter"
        - $ref: "#/components/parameters/ReadersFilter"
        - $ref: "#/components/parameters/StatusesFilter"
        - $ref: "#/components/parameters/PaymentTypesFilter"
        - $ref: "#/components/parameters/TypesFilter"
        - $ref: "#/components/parameters/ChangesSinceFilter"
        - $ref: "#/components/parameters/NewestTimeFilter"
        - $ref: "#/components/parameters/NewestRefFilter"
        - $ref: "#/components/parameters/OldestTimeFilter"
        - $ref: "#/components/parameters/OldestRefFilter"
      responses:
        "200":
          $ref: "#/components/responses/TransactionList"
        "401":
          $ref: "#/components/responses/ErrorNotAuthorized"
  /me/transactions:
    get:
      summary: Retrieve a transaction
      description: |
        Retrieves the full details of an identified transaction. The transaction resource is identified by a query parameter and *one* of following parameters is required:
         *  `id`
         *  `internal_id`
         *  `transaction_code`
      tags:
        - Transactions
      security:
        - accessToken:
          - transactions.history
      parameters:
        - $ref: "#/components/parameters/TransactionID"
        - $ref: "#/components/parameters/TransactionInternalID"
        - $ref: "#/components/parameters/TransactionCode"
        # The following two parameters are commented out to avoid confusion.
        # - $ref: "#/components/parameters/foreignTransactionID"
        # - $ref: "#/components/parameters/ClientTransactionIDTrx"
        - $ref: "#/components/parameters/EventStatusesFilter"
        - $ref: "#/components/parameters/EventTypesFilter"
      responses:
        "200":
          $ref: "#/components/responses/Transaction"
        "401":
          $ref: "#/components/responses/ErrorNotAuthorized"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
security:
  - accessToken: []
components:
  schemas:
  # Checkout models
    Checkout: # Base checkout model used for creating checkouts and reused in processing checkouts
      type: object
      description: Details of the payment checkout.
      properties:
        checkout_reference:
          type: string
          description: Unique ID of the payment checkout specified by the client application when creating the checkout resource.
        amount:
          type: number
          format: float
          description: Amount of the payment.
        currency:
          $ref: "#/components/schemas/Currency"
        pay_to_email:
          type: string
          format: email
          description: Email address of the registered user (merchant) to whom the payment is made.
        # DEBUG - The `pay_from_email` parameter should be used for balance payments and can be commented out from the model to avoid confusion.
        pay_from_email:
          type: string
          format: email
          description: Email address of the registered user (merchant) who is making the payment.
        description:
          type: string
          description: Short description of the payment.
        return_url:
          type: string
          format: uri
          description: URL to which the SumUp platform sends the processing status of the payment checkout.
        id:
          type: string
          description: Unique ID of the checkout resource.
          readOnly: true
        status:
          type: string
          description: Currrent status of the checkout.
          readOnly: true
          enum:
            - PENDING
            - FAILED
            - PAID
        date:
          type: string
          format: date-time
          description: Date and time of the creation of the payment checkout.
          readOnly: true
        valid_until:
          type: string
          format: date-time
          description: Date and time of the checkout expiration before which the client application needs to send a processing request. If no value is present, the checkout does not have an expiration time.
          readOnly: true
          nullable: true
        transactions:
          type: array
          description: List of transactions related to the payment.
          readOnly: true
          uniqueItems: true
          items:
            allOf:
              - $ref: "#/components/schemas/TransactionMixinBase"
              - $ref: "#/components/schemas/TransactionMixinCheckout"
      required:
        - checkout_reference
        - amount
        - currency
        - pay_to_email
        - id
        - status
        - date
        - transactions
    CheckoutProcessMixin: # Model for the request body for processing a checkout
      type: object
      description: Details of the payment instrument for processing the checkout.
      properties:
        payment_type:
          type: string
          description: Type of payment instrument used for processing the checkout.
          enum:
            - card
            # The following options should be valid but are not used for ecomm and are commented out to avoid confusion.
            # - balance
            # - boleto
            # - direct_debit
            # - moto
        # DEBUG - The `installments`parameter should be used only in Brazil and is commented out to avoid confusion.
          # installments:
          #   type: integer
          #   description: Number of installments for deferred payments.
          #   minimum: 1
      required:
        - payment_type
    CheckoutProcessCard:
      allOf:
        - $ref: "#/components/schemas/CheckoutProcessMixin"
        - type: object
          properties:
            card:
              $ref: "#/components/schemas/Card"
          required:
            - card
    CheckoutProcessToken:
      allOf:
        - $ref: "#/components/schemas/CheckoutProcessMixin"
        - type: object
          properties:
            token:
              type: string
              description: Unique token identifying the saved payment card for a customer.
            customer_id:
              $ref: "#/components/schemas/CustomerID"
          required:
            - token
            - customer_id
    CheckoutSuccess: # Model for the response body of successfully-processed checkouts
      allOf:
        - $ref: "#/components/schemas/Checkout"
        - type: object
          properties:
            transaction_code:
              type: string
              description: Transaction code of the successful transaction with which the payment for the checkout is completed.
              readOnly: true
            transaction_id:
              type: string
              description: Transaction ID of the successful transaction with which the payment for the checkout is completed.
              readOnly: true
  # Customer models
    Customer:
      type: object
      description: Details of the customer.
      required:
        - customer_id
      properties:
        customer_id:
          $ref: "#/components/schemas/CustomerID"
        personal_details:
          $ref: "#/components/schemas/PersonalDetails"
    PersonalDetails:
      type: object
      description: Personal details for the customer.
      properties:
        first_name:
          type: string
          description: First name of the customer.
        last_name:
          type: string
          description: Last name of the customer.
        email:
          type: string
          description: Email address of the customer.
        phone:
          type: string
          description: Phone number of the customer.
        address:
          $ref: "#/components/schemas/Address"
    Address:
      type: object
      description: Details of the registered address.
      properties:
        city:
          type: string
          description: City name from the address.
        country:
          type: string
          description: Country name from the address.
        line1:
          type: string
          description: First line of the address with details of the street name and number.
        line2:
          type: string
          description: Second line of the address with details of the building, unit, apartment, and floor numbers.
        postal_code:
          type: string
          description: Postal code from the address.
        state:
          type: string
          description: State name or abbreviation from the address.
  # Payment instrument model - currently, only "card" is defined
    PaymentInstrumentCard:
      type: object
      description: Details of the payment card that is saved as a payment instrument.
      properties:
        token:
          type: string
          description: Unique token identifying the saved payment card for a customer.
          readOnly: true
        active:
          type: boolean
          description: Indicates whether the payment instrument is active and can be used for payments. To deactivate it, send a `DELETE` request to the resource endpoint.
          readOnly: true
          default: true
        type:
          type: string
          description: Type of the payment instrument.
          enum:
            - card
            # The `direct_debit` option is commented out since it's not officially supported yet.
            # - direct_debit
        card:
          $ref: "#/components/schemas/Card"
      required:
        - token
        - active
        - type
        - card
  # Transaction models
    TransactionMixinBase:
      type: object
      description: Details of the transaction.
      properties:
        id:
          type: string
          description: Unique ID of the transaction.
        transaction_code:
          type: string
          description: Transaction code returned by the acquirer/processing entity after processing the transaction.
        amount:
          type: number
          format: float
          description: Total amount of the transaction.
        currency:
          $ref: "#/components/schemas/Currency"
        timestamp:
          type: string
          format: date-time
          description: Date and time of the creation of the transaction.
        status:
          type: string
          description: Current status of the transaction.
          # DEBUG - Verify the possible values and comment out the irrelevant ones to avoid confusion
          enum:
            - AUTH
            - CANCELLED
            - CAPTURED
            - CC_CUSTOMER_ENTRY_CANCELLED
            - CC_CUSTOMER_ENTRY_PENDING
            - CHARGE_BACK
            - CHARGEBACK_COLLECTED
            - CHARGEBACK_REVERSAL
            - DECLINED_ACQUIRER
            - DECLINED_CARD
            - DECLINED_INTERNAL
            - MISMATCHED
            - NON_COLLECTION
            - NOT_SENT_TO_ACQUIRER
            - PAID_OUT
            - PAYOUT_CALCULATED
            - PAYOUT_CREATED
            - PAYOUT_FAILED
            - RECONCILED
            - REFUND_FAILED
            - REFUND_PENDING
            - REFUNDED
            - REPORTED_FRAUD
            - RETRIEVAL_REQUEST
            - REVERSAL_FAILED
            - REVERSED
            - ROGER_THAT
            - SETTLED
            - SETTLED_FOR_DECLINED
            - SYSTEM_ERROR
            - TIMED_OUT
            - UNKNOWN
            - WITHHELD
        payment_type:
          type: string
          description: Payment type used for the transaction.
          # DEBUG - Verify the possible values and comment out the irrelevant ones to avoid confusion
          enum:
            - BALANCE
            - BITCOIN
            - BOLETO
            - CASH
            - ECOM
            - POS
            - RECURRING
            - UNKNOWN
        installments_count:
          type: integer
          description: Current number of the installment for deferred payments.
          minimum: 1
    TransactionMixinCheckout:
      type: object
      properties:
        merchant_code:
          type: string
          description: Unique code of the registered merchant to whom the payment is made.
        vat_amount:
          type: number
          format: float
          description: Amount of the applicable VAT (out of the total transaction amount).
        tip_amount:
          type: number
          format: float
          description: Amount of the tip (out of the total transaction amount).
        entry_mode:
          type: string
          description: Entry mode of the payment details.
          # DEBUG - Verify the possible values and comment out the irrelevant ones to avoid confusion
          enum:
            - BOLETO
            - CHIP
            - CONTACTLESS
            - CONTACTLESS_MAGSTRIPE
            - customer entry
            - DIRECT_DEBIT
            - MAGSTRIPE
            - MAGSTRIPE_FALLBACK
            - MANUAL_ENTRY
            - MOTO
            - NONE
        auth_code:
          type: string
          description: Authorization code for the transaction sent by the payment card issuer or bank. Applicable only to card payments.
        internal_id:
          type: integer
          description: Internal unique ID of the transaction on the SumUp platform.
    TransactionMixinHistory:
      type: object
      properties:
        product_summary:
          type: string
          description: Short description of the payment. The value is taken from the `description` property of the related checkout resource.
        payouts_total:
          type: integer
          description: Total number of payouts to the registered user specified in the `user` property.
        payouts_received:
          type: integer
          description: Number of payouts that are made to the registered user specified in the `user` property.
        payout_plan:
          type: string
          description: Payout plan of the registered user at the time when the transaction was made. # FIXME Verify this
          enum:
            - SINGLE_PAYMENT
            - TRUE_INSTALLMENT
            - ACCELERATED_INSTALLMENT
    TransactionHistory:
      allOf:
        - $ref: "#/components/schemas/TransactionMixinBase"
        - $ref: "#/components/schemas/TransactionMixinHistory"
        - type: object
          properties:
            transaction_id:
              $ref: "#/components/schemas/TransactionID"
            user:
              $ref: "#/components/schemas/User"
            type:
              type: string
              description: Type of the transaction for the registered user specified in the `user` property.
              enum:
                - PAYMENT
                - REFUND
                - CHARGE_BACK
            card_type:
              type: string
              description: Issuing card network of the payment card used for the transaction.
              enum:
                - AMEX
                - CUP
                - DINERS
                - DISCOVER
                - ELO
                - ELV
                - HIPERCARD
                - JCB
                - MAESTRO
                - MASTERCARD
                - VISA
                - VISA_ELECTRON
                - VISA_VPAY
                - UNKNOWN
    TransactionFull:
      allOf:
        - $ref: "#/components/schemas/TransactionMixinBase"
        - $ref: "#/components/schemas/TransactionMixinCheckout"
        - $ref: "#/components/schemas/TransactionMixinHistory"
        - type: object
          properties:
            username:
              $ref: "#/components/schemas/User"
            lat:
              $ref: "#/components/schemas/Lat"
            lon:
              $ref: "#/components/schemas/Lon"
            horizontal_accuracy:
              $ref: "#/components/schemas/HorizontalAccuracy"
            simple_payment_type:
              type: string
              description: Simple name of the payment type.
              enum:
                - CASH
                - CC_SIGNATURE
                - ELV
                - CC_CUSTOMER_ENTERED
                - MANUAL_ENTRY
                - EMV
                - MOTO
            verification_method:
              type: string
              description: Verification method used for the transaction.
              enum:
                - none
                - signature
                - offline pin
                - online pin
                - offline pin and signature
                - confirmation code verified
            card:
              $ref: "#/components/schemas/Card"
            local_time:
              type: string
              format: date-time
              description: Local date and time of the creation of the transaction.
            payout_type:
              type: string
              description: Payout method for the transaction amount.
              enum:
                - BANK_ACCOUNT
                - PREPAID_CARD
                - BALANCE
            products:
              type: array
              description: List of products from the merchant's catalog for which the transaction serves as a payment.
              items:
                $ref: "#/components/schemas/Product"
            vat_rates: # Define separate model
              type: array
              description: List of VAT rates applicable to the transaction.
              items: {}
            transaction_events:
              type: array
              description: List of transaction events related to the transaction.
              items:
                $ref: "#/components/schemas/TransactionEvent"
            simple_status:
              type: string
              description: Status generated fromthe processing status and the latest transaction state.
              enum:
                - CANCEL_FAILED
                - CANCELLED
                - CHARGEBACK
                - FAILED
                - REFUND_FAILED
                - REFUNDED
                - SUCCESSFUL
            links:
              type: array
              description: List of hyperlinks for accessing related resources.
              uniqueItems: true
              items:
                anyOf:
                  - $ref: "#/components/schemas/Link"
                  - $ref: "#/components/schemas/LinkRefund"
            events:
              type: array
              description: List of events related to the transaction.
              uniqueItems: true
              items:
                $ref: "#/components/schemas/Event"
            location:
              type: object
              description: Details of the payment location as received from the payment terminal.
              properties:
                lat:
                  $ref: "#/components/schemas/Lat"
                lon:
                  $ref: "#/components/schemas/Lon"
                horizontal_accuracy:
                  $ref: "#/components/schemas/HorizontalAccuracy"
            tax_enabled:
              type: boolean
              description: Indicates whether tax deduction is enabled for the transaction.
    # Error models
    Error:
      type: object
      description: Error message structure.
      required:
        - message
        - error_code
      properties:
        message:
          type: string
          description: Short description of the error.
        error_code:
          type: string
          description: Platform code for the error.
    ErrorExtended:
      allOf:
        - $ref: "#/components/schemas/Error"
        - type: object
          required:
            - param
          properties:
            param:
              type: string
              description: Parameter name (with relative location) to which the error applies. Parameters from embedded resources are displayed using dot notation. For example, `card.name` refers to the `name` parameter embedded in the `card` object.
    # DEBUG - Rework the model (property names) to make it consistent with other error responses. A possible solution would be to use the basic `Error` model since the HTTP status code is returned in the response headers anyway.
    ErrorForbidden:
      type: object
      description: Error message for forbidden requests.
      required:
        - error_message
        - error_code
        - status_code
      properties:
        error_message:
          type: string
          description: Short description of the error.
        error_code:
          type: string
          description: Platform code for the error.
        status_code:
          type: string
          description: HTTP status code for the error.
  # Misc properties and models reused in other models
    Currency:
      type: string
      description: Three-letter [ISO4217](https://en.wikipedia.org/wiki/ISO_4217) code of the currency for the amount. Possible values are only ones from the list of curently supported currencies.
      enum:
        - BGN
        - BRL
        - CHF
        - CLP
        - CZK
        - DKK
        - EUR
        - GBP
        - HRK
        - HUF
        - NOK
        - PLN
        - RON
        - RUB
        - SEK
        - USD
    Card:
      type: object
      description: Details of the payment card.
      properties:
        name:
          type: string
          description: Name of the cardholder as it appears on the payment card.
          writeOnly: true
        number:
          type: string
          description: Number of the payment card (without spaces).
          writeOnly: true
        expiry_year:
          type: string
          description: Year from the expiration time of the payment card. Accepted formats are `YY` and `YYYY`.
          writeOnly: true
          minLength: 2
          maxLength: 4
        expiry_month:
          type: string
          description: Month from the expiration time of the payment card. Accepted format is `MM`.
          writeOnly: true
          enum:
            - '01'
            - '02'
            - '03'
            - '04'
            - '05'
            - '06'
            - '07'
            - '08'
            - '09'
            - '10'
            - '11'
            - '12'
        cvv:
          type: string
          description: Three-digit card verification value (security code) of the payment card.
          writeOnly: true
          maxLength: 3
          minLength: 3
        last_4_digits:
          type: string
          description: Last 4 digits of the payment card number.
          readOnly: true
          minLength: 4
          maxLength: 4
        type:
          type: string
          description: Issuing card network of the payment card.
          readOnly: true
          enum:
            - AMEX
            - CUP
            - DINERS
            - DISCOVER
            - ELO
            - ELV
            - HIPERCARD
            - JCB
            - MAESTRO
            - MASTERCARD
            - VISA
            - VISA_ELECTRON
            - VISA_VPAY
            - UNKNOWN
      required:
        - name
        - number
        - expiry_month
        - expiry_year
        - cvv
        - last_4_digits
        - type
    CustomerID:
      type: string
      description: Unique ID of the customer.
    Lat:
      type: number
      format: float
      description: Latitude value from the coordinates of the payment location (as received from the payment terminal reader).
      minimum: 0
      maximum: 90
    Lon:
      type: number
      format: float
      description: Longitude value from the coordinates of the payment location (as received from the payment terminal reader).
      minimum: 0
      maximum: 180
    HorizontalAccuracy:
      type: number
      format: float
      description: Indication of the precision of the geographical position received from the payment terminal. # Debug - Possible values are in the range `0-1`.
      # minimum: 0
      # maximum: 1
    Link:
      type: object
      description: Details of a link to a related resource.
      properties:
        rel:
          type: string
          description: Specifies the relation to the current resource.
        href:
          type: string
          format: uri
          description: URL for accessing the related resource.
        type:
          type: string
          description: Specifies the media type of the related resource.
    LinkRefund:
      allOf:
        - $ref: "#/components/schemas/Link"
        - type: object
          properties:
            min_amount:
              type: number
              format: float
              description: Minimum allowed amount for the refund.
            max_amount:
              type: number
              format: float
              description: Maximum allowed amount for the refund.
    EventID:
      type: integer
      description: Unique ID of the transaction event.
    TransactionID:
      type: string
      description:  Unique ID of the transaction.
    User:
      type: string
      format: email
      description: Email address of the registered user (merchant) to whom the payment is made.
    AmountEvent:
      type: number
      format: float
      description: Amount of the event.
    TimestampEvent:
      type: string
      format: date-time
      description: Date and time of the transaction event.
    EventType:
      type: string
      description: Type of the transaction event.
      enum:
        - PAYOUT
        - CHARGE_BACK
        - REFUND
        #- PAYOUT_DEDUCTION
    EventStatus:
      type: string
      description: Status of the transaction event.
      enum:
        - PENDING
        - SCHEDULED
        - FAILED
        - REFUNDED
        - SUCCESSFUL
    TransactionEvent:
      type: object
      description: Details of a transaction event.
      properties:
        id:
          $ref: "#/components/schemas/EventID"
        event_type:
          $ref: "#/components/schemas/EventType"
        status:
          $ref: "#/components/schemas/EventStatus"
        amount:
          $ref: "#/components/schemas/AmountEvent"
        due_date:
          type: string
          format: date
          description: Date when the transaction event is due to occur.
        date:
          type: string
          format: date
          description: Date when the transaction event occurred.
        installment_number:
          type: integer
          description: Consequtive number of the installment that is paid. Applicable only payout events, i.e. `event_type = PAYOUT`.
        timestamp:
          $ref: "#/components/schemas/TimestampEvent"
    Event:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/EventID"
        transaction_id:
          $ref: "#/components/schemas/TransactionID"
        type:
          $ref: "#/components/schemas/EventType"
        status:
          $ref: "#/components/schemas/EventStatus"
        amount:
          $ref: "#/components/schemas/AmountEvent"
        timestamp:
          $ref: "#/components/schemas/TimestampEvent"
        fee_amount:
          type: number
          format: float
          description: Amount of the fee related to the event.
        installment_number:
          type: integer
          description: Consequtive number of the installment.
        deducted_amount:
          type: number
          format: float
          description: Amount deducted for the event.
        deducted_fee_amount:
          type: number
          format: float
          description: Amount of the fee deducted for the event. # FIXME Verify this
    Product:
      type: object
      description: Details of the product for which the payment is made.
      properties:
        name:
          type: string
          description: Name of the product from the merchant's catalog.
        price:
          type: number
          format: float
          description: Price of the product without VAT.
        vat_rate:
          type: number
          format: float
          description: VAT rate applicable to the product.
        single_vat_amount:
          type: number
          format: float
          description: Amount of the VAT for a single product item (calculated as the product of `price` and `vat_rate`, i.e. `single_vat_amount = price * vat_rate`).
        price_with_vat:
          type: number
          format: float
          description: Price of a single product item with VAT.
        vat_amount:
          type: number
          format: float
          description: Total VAT amount for the purchase (calculated as the product of `single_vat_amount` and `quantity`, i.e. `vat_amount = single_vat_amount * quantity`).
        quantity:
          type: number
          description: Number of product items for the purchase.
        total_price:
          type: number
          format: float
          description: Total price of the product items without VAT (calculated as the product of `price` and `quantity`, i.e. `total_price = price * quantity`).
        total_with_vat:
          type: number
          format: float
          description: Total price of the product items including VAT (calculated as the product of `price_with_vat` and `quantity`, i.e. `total_with_vat = price_with_vat * quantity`).
  requestBodies:
    CheckoutCreate:
      description: Details of the payment checkout.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Checkout"
    CheckoutProcess:
      description: Details of the payment instrument for processing the checkout.
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/CheckoutProcessCard"
              - $ref: "#/components/schemas/CheckoutProcessToken"
    CustomerCreate:
      description: Details of the customer.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Customer"
    CustomerUpdate:
      description: Details of the saved customer.
      content:
        application/json:
          schema:
            type: object
            properties:
              personal_details:
                $ref: "#/components/schemas/PersonalDetails"
    PaymentInstrument:
      description: Details of the payment instrument.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PaymentInstrumentCard"
    Refund:
      description: Amount for partial refunds.
      content:
        application/json:
          schema:
            type: object
            description: Optional amount for partial refunds of transactions.
            properties:
              amount:
                type: number
                format: float
                description: Amount to refund for this transaction. The value cannot exceed the amount of the transaction. If you do not specify a value, the system performs a full refund of the transaction.
  responses:
    # Success responses
    CheckoutList:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              anyOf:
                - $ref: "#/components/schemas/CheckoutSuccess"
                - $ref: "#/components/schemas/Checkout"
    CheckoutCreate:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Checkout"
    CheckoutProcess:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CheckoutSuccess"
    Customer:
      description: Details of the saved customer.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Customer"
    PaymentInstrumentList:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PaymentInstrumentCard"
    PaymentInstrument:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PaymentInstrumentCard"
    TransactionList:
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - items
            properties:
              items:
                type: array
                items:
                  $ref: "#/components/schemas/TransactionHistory"
              links:
                type: array
                items:
                  $ref: "#/components/schemas/Link"
    Transaction:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TransactionFull"
    # Error responses
    # ErrorBadRequest:
    #   description: Bad Request
    #   content:
    #     application/json:
    #       schema:
    #         $ref: "#/components/schemas/ErrorExtended"
    #       examples:
    #         Invalid_Parameter:
    #           description: A required parameter has an invalid value.
    #           value: {"message":"Validation error","error_code":"INVALID","param":"card.expiry_year"}
    # FIXME - See if this one works
    ErrorBadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/ErrorExtended"
              - type: array
                description: List of error messages.
                items:
                  $ref: "#/components/schemas/ErrorExtended"
          examples:
            Invalid_Parameter:
              description: A required parameter has an invalid value.
              value: {"message":"Validation error","error_code":"INVALID","param":"card.expiry_year"}
            Multiple_Invalid_Parameters:
              description: Multiple required parameters have invalid values.
              value: [{"error_code":"INVALID","message":"Validation error","param":"card.name"},{"error_code":"INVALID","message":"Validation error","param":"card.number"},{"error_code":"INVALID","message":"Validation error","param":"card.expiry_year"}]
    ErrorNotAuthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            Invalid_Token:
              description: The access token is invalid or has expired.
              value: {"error_message":"invalid access token","error_code":"NOT_AUTHORIZED"}
            Missing_Token:
              description: No access token is provided.
              value: {"message":"Not authorized","error_code":"NOT_AUTHORIZED"}
    ErrorForbidden: # DEBUG - Rework the used model for consistency.
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorForbidden"
          examples:
            Forbidden:
              description: You do not have a required scopes for making this request.
              value: {"error_message":"request_not_allowed","error_code":"FORBIDDEN","status_code":403}
    ErrorNotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            Not_Found:
              description: The identified resource is not found on the server.
              value: {"error_code":"NOT_FOUND","message":"Resource not found"}
    ErrorConflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            Checkout_Processed:
              description: The identified checkout resource is already processed.
              value: {"error_code":"CHECKOUT_PROCESSED","message":"Checkout is already processed"}
  parameters:
    CheckoutReference:
      name: checkout_reference
      in: query
      description: Filters the list of checkout resources by the unique ID of the checkout.
      required: false
      schema:
        type: string
    ClientTransactionID:
      name: client_transaction_id
      in: query
      description: Filters the list of checkout resources by client transaction ID. When you use this option, you also need to specify the merchant code in the `merchant_code` query parameter.
      required: false
      schema:
        type: string
    MerchantCode:
      name: merchant_code
      in: query
      description: Filters the list of checkout resources by merchant code. This parameter is required when you are using the `client_transaction_id` query parameter for filtering the results.
      required: false
      schema:
        type: string
    CheckoutID:
      name: id
      in: path
      required: true
      description: Unique ID of the checkout resource.
      schema:
        type: string
    CustomerID:
      name: customer_id
      in: path
      required: true
      description: Unique ID of the saved customer resource.
      schema:
        type: string
    Token:
      name: token
      in: path
      required: true
      description: Unique token identifying the card saved as a payment instrument resource.
      schema:
        type: string
    TxnID:
      name: txn_id
      in: path
      required: true
      description: Unique ID of the transaction.
      schema:
        type: string
    TransactionCode:
      name: transaction_code
      in: query
      description: Retrieves the transaction resource with the specified transaction code.
      required: false
      schema:
        type: string
    OrderFilter:
      name: order
      in: query
      description: Specifies the order in which the returned results are displayed.
      schema:
        type: string
        enum:
          - ascending
          - descending
        default:
          - ascending
    LimitFilter:
      name: limit
      in: query
      description: Specifies the maximum number of results returned per page.
      schema:
        type: integer
    UserIDFilter:
      name: user_id
      in: query
      description: |
        Filters the results by user ID and returns only transaction resources associated with the specified user. The user can be identified via one of the following parameters:
          * email
          * masked merchant ID
          * original user ID

        If you do not specify user identification, the response contains transaction resources associated with the currently authenticated user account.
      required: false
      schema:
        type: string
    UsersFilter:
      name: users
      in: query
      description: Filters the returned results by user email.
      required: false
      schema:
        type: array
        items:
          type: string
          format: email
    # DEBUG - this filter should be commented out to avoid confusion.
    GeoCoordinatesFilter:
      name: geo_coordinates
      in: query
      description: |
        Filters the results by the geographical coordinates of the location where the transaction is made (as retrieved from the terminal device) and returns only results that fall within the specified rectangular area. The accepted format is a comma-separated list of coordinate points that form a rectangle defined by the following parameters:
          * `southwest_lng` (for the longitude value of the southwestern edge of the rectangle)
          * `southwest_lat` (for the latitude value of the southwestern edge of the rectangle)
          * `northeast_lng` (for the longitude value of the northeastern edge of the rectangle)
          * `northeast_lat` (for the latitude value of the northeastern edge of the rectangle)
      required: false
      schema:
        type: string
    # DEBUG - this filter should be commented out to avoid confusion.
    ReadersFilter:
      name: readers
      in: query
      description: Filters the returned results by the specified list of serial numbers of the terminal readers used for the transactions.
      required: false
      schema:
        type: array
        items:
          type: string
    StatusesFilter:
      name: statuses
      in: query
      description: Filters the returned results by the specified list of final statuses of the transactions.
      required: false
      schema:
        type: array
        items:
          type: string
          enum:
            - SUCCESSFUL
            - CANCELLED
            - FAILED
    # DEBUG - this filter should be commented out to avoid confusion.
    PaymentTypesFilter:
      name: payment_types
      in: query
      description: Filters the returned results by the specified list of payment types used for the transactions.
      required: false
      schema:
        type: array
        items:
          type: string
          enum:
            - CASH
            - POS
            - ECOM
            - BITCOIN
            - BALANCE
    TypesFilter:
      name: types
      in: query
      description: Filters the returned results by the specified list of transaction types.
      required: false
      schema:
        type: array
        items:
          type: string
          enum:
            - PAYMENT
            - REFUND
            - CHARGE_BACK
    ChangesSinceFilter:
      name: changes_since
      in: query
      description: Filters the results by the latest modification time of resources and returns only transactions that are modified *after* the specified timestamp (in ISO8601 format).
      required: false
      schema:
        type: string
        format: date-time
    NewestTimeFilter:
      name: newest_time
      in: query
      description: Filters the results by the creation time of resources and returns only transactions that are created *before* the specified timestamp (in ISO8601 format).
      required: false
      schema:
        type: string
        format: date-time
    NewestRefFilter:
      name: newest_ref
      in: query
      description: Filters the results by the reference ID of transaciton events and returns only transactions with events whose IDs are *smaller* than the specified value. This parameters supersedes the `newest_time` parameter (if both are provided in the request).
      required: false
      schema:
        type: string
    OldestTimeFilter:
      name: oldest_time
      in: query
      description: Filters the results by the creation time of resources and returns only transactions that are created *after* the specified timestamp (in ISO8601 format).
      required: false
      schema:
        type: string
        format: date-time
    OldestRefFilter:
      name: oldest_ref
      in: query
      description: Filters the results by the reference ID of transaciton events and returns only transactions with events whose IDs are *greater* than the specified value. This parameters supersedes the `oldest_time` parameter (if both are provided in the request).
      required: false
      schema:
        type: string
    TransactionID:
      name: id
      in: query
      description: Retrieves the transaction resource with the specified transaction ID (the `id` parameter in the transaction resource).
      required: false
      schema:
        type: string
    TransactionInternalID:
      name: internal_id
      in: query
      description: Retrieves the transaction resource with the specified internal transaction ID (the `internal_id` parameter in the transaction resource).
      required: false
      schema:
        type: string
    # The following two parameters are commented out to avoid confusion.
      # # foreignTransactionId:
      #   name: foreign_transaction_id
      #   in: query
      #   description: Retrieves the transaction resource with the specified external (foreign) transaction ID (the `id` parameter in the transaction resource).
      #   required:
      #   schema:
      #     type: string
      # clientTransactionIdTrx:
      #   name: client_transaction_id
      #   in: query
      #   description: Retrieves the transaction resource with the specified client transaction ID (the `client_transaction_id` parameter in the transaction resource).
      #   required:
      #   schema:
      #     type: string
    EventStatusesFilter:
      name: event_statuses
      in: query
      description: Filters the returned transaction events in the transaction resource by the speficied transaction event statuses.
      required: false
      schema:
        type: array
        items:
          type: string
          enum: # DEBUG Verify and list all possible values
            - FAILED
            - SUCCESSFUL
    EventTypesFilter:
      name: event_types
      in: query
      description: Filters the returned transaction events in the transaction resource by specified transaction event types.
      required: false
      schema:
        type: array
        items:
          type: string
          enum: # DEBUG Verify and list all possible values
            - PAYOUT
            - REFUND
            - CHARGE_BACK
            - PAYOUT_DEDUCTION
  securitySchemes:
    accessToken:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://api.sumup.com/authorize
          tokenUrl: https://api.sumup.com/token
          refreshUrl: https://api.sumup.com/token
          scopes:
            payments: Make payments by creating and processing checkouts.
            transactions.history: View your transactions and transaction history.
            user.profile_readonly: View your user profile details.
            user.app-settings: View and manage the settings of your client application.
            payments_instruments: Manage customers and their payment instruments.
          # # balance: View and manage your payout balance.
            # user.profile: View and manage your user profile
            # user.payout-settings: View and manage your payout settings
            # user.subaccounts: View and manage the user profile details of your employees
            # products: View and manage products, shelves, prices, and VAT rates
            # boleto: Process boleto checkouts
            # referrals.reports:
            # referrals.post:
            # referrals.payout:
            # sepa_dd: Manage SEPA Direct Debit mandates for customers.
        clientCredentials:
          tokenUrl: https://api.sumup.com/token
          scopes:
            payments: Make payments by creating and processing checkouts.
            user.app-settings: View and manage the settings of your client application.
          # # transactions.history: View your transactions and transaction history.
            # user.profile_readonly: View your user profile details.
            # payments_instruments: Manage customers and their payment instruments.
          # # balance: View and manage your payout balance.
            # user.profile: View and manage your user profile
            # user.payout-settings: View and manage your payout settings
            # user.subaccounts: View and manage the user profile details of your employees
            # products: View and manage products, shelves, prices, and VAT rates
            # boleto: Process boleto checkouts
            # referrals.reports:
            # referrals.post:
            # referrals.payout:
  # examples:
  # headers:
  # links:
  # callbacks:
